[{"D:\\projects\\epam\\memoryGame\\src\\index.tsx":"1","D:\\projects\\epam\\memoryGame\\src\\App.tsx":"2","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts":"3","D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx":"4","D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js":"5","D:\\projects\\epam\\memoryGame\\src\\containers\\index.js":"6","D:\\projects\\epam\\memoryGame\\src\\components\\index.js":"7","D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js":"8","D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js":"9","D:\\projects\\epam\\memoryGame\\src\\components\\Header.js":"10","D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js":"11","D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js":"12","D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js":"13","D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx":"14","D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts":"15","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts":"16","D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx":"17","D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js":"18","D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts":"19","D:\\projects\\epam\\memory-game\\client\\src\\index.tsx":"20","D:\\projects\\epam\\memory-game\\client\\src\\App.tsx":"21","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\index.ts":"22","D:\\projects\\epam\\memory-game\\client\\src\\utils\\preloadImages.js":"23","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\settings.ts":"24","D:\\projects\\epam\\memory-game\\client\\src\\containers\\index.ts":"25","D:\\projects\\epam\\memory-game\\client\\src\\components\\index.ts":"26","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\cats\\index.js":"27","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\architecture\\index.js":"28","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\winter\\index.js":"29","D:\\projects\\epam\\memory-game\\client\\src\\services\\storage.ts":"30","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Menu.tsx":"31","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Rules.tsx":"32","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Settings.tsx":"33","D:\\projects\\epam\\memory-game\\client\\src\\containers\\GamePage.tsx":"34","D:\\projects\\epam\\memory-game\\client\\src\\containers\\ChooseCardsThemes.tsx":"35","D:\\projects\\epam\\memory-game\\client\\src\\components\\Footer.tsx":"36","D:\\projects\\epam\\memory-game\\client\\src\\components\\Header.tsx":"37","D:\\projects\\epam\\memory-game\\client\\src\\components\\Card.tsx":"38","D:\\projects\\epam\\memory-game\\client\\src\\components\\Loader.tsx":"39","D:\\projects\\epam\\memory-game\\client\\src\\components\\FinalModal.tsx":"40","D:\\projects\\epam\\memory-game\\client\\src\\components\\GroupCard.tsx":"41","D:\\projects\\epam\\memory-game\\client\\src\\components\\Board.tsx":"42","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\index.ts":"43","D:\\projects\\epam\\memory-game\\client\\src\\utils\\gameUtils.ts":"44","D:\\projects\\epam\\memory-game\\client\\src\\utils\\getImage.ts":"45","D:\\projects\\epam\\memory-game\\client\\src\\thunks\\settings.ts":"46","D:\\projects\\epam\\memory-game\\client\\src\\components\\LinkButton.tsx":"47","D:\\projects\\epam\\memory-game\\client\\src\\components\\Modal.tsx":"48","D:\\projects\\epam\\memory-game\\client\\src\\components\\PlaySoundButton.tsx":"49","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\settings.ts":"50","D:\\projects\\epam\\memory-game\\client\\src\\actions\\index.ts":"51","D:\\projects\\epam\\memory-game\\client\\src\\actions\\settings.ts":"52","D:\\projects\\epam\\memory-game\\client\\src\\config.ts":"53"},{"size":861,"mtime":1613922384565,"results":"54","hashOfConfig":"55"},{"size":1966,"mtime":1613936060198,"results":"56","hashOfConfig":"55"},{"size":142,"mtime":1613936350117,"results":"57","hashOfConfig":"55"},{"size":1470,"mtime":1610840944000,"results":"58","hashOfConfig":"55"},{"size":687,"mtime":1613904030218,"results":"59","hashOfConfig":"55"},{"size":243,"mtime":1613936316946,"results":"60","hashOfConfig":"55"},{"size":177,"mtime":1613915341553,"results":"61","hashOfConfig":"55"},{"size":1877,"mtime":1613930758083,"results":"62","hashOfConfig":"55"},{"size":2242,"mtime":1613935905267,"results":"63","hashOfConfig":"55"},{"size":640,"mtime":1613936296854,"results":"64","hashOfConfig":"55"},{"size":1313,"mtime":1613936437514,"results":"65","hashOfConfig":"55"},{"size":7005,"mtime":1613936530064,"results":"66","hashOfConfig":"55"},{"size":1530,"mtime":1613934529446,"results":"67","hashOfConfig":"55"},{"size":135,"mtime":1613912832959,"results":"68","hashOfConfig":"55"},{"size":283,"mtime":1613933981201,"results":"69","hashOfConfig":"55"},{"size":124,"mtime":1544784792000,"results":"70","hashOfConfig":"55"},{"size":3431,"mtime":1613923286664,"results":"71","hashOfConfig":"55"},{"size":427,"mtime":1613915905947,"results":"72","hashOfConfig":"55"},{"size":771,"mtime":1613935001899,"results":"73","hashOfConfig":"55"},{"size":888,"mtime":1614523888562,"results":"74","hashOfConfig":"75"},{"size":2522,"mtime":1614525575279,"results":"76","hashOfConfig":"75"},{"size":158,"mtime":1614523888563,"results":"77","hashOfConfig":"75"},{"size":730,"mtime":1614523888569,"results":"78","hashOfConfig":"75"},{"size":633,"mtime":1614523888564,"results":"79","hashOfConfig":"75"},{"size":290,"mtime":1614523888559,"results":"80","hashOfConfig":"75"},{"size":306,"mtime":1614523888552,"results":"81","hashOfConfig":"75"},{"size":258,"mtime":1614523888323,"results":"82","hashOfConfig":"75"},{"size":384,"mtime":1614523888291,"results":"83","hashOfConfig":"75"},{"size":300,"mtime":1614523888344,"results":"84","hashOfConfig":"75"},{"size":964,"mtime":1614523888566,"results":"85","hashOfConfig":"75"},{"size":945,"mtime":1614523888556,"results":"86","hashOfConfig":"75"},{"size":1441,"mtime":1614523888556,"results":"87","hashOfConfig":"75"},{"size":8831,"mtime":1614523888559,"results":"88","hashOfConfig":"75"},{"size":6435,"mtime":1614523888555,"results":"89","hashOfConfig":"75"},{"size":2904,"mtime":1614523888555,"results":"90","hashOfConfig":"75"},{"size":1977,"mtime":1614523888542,"results":"91","hashOfConfig":"75"},{"size":989,"mtime":1614523888546,"results":"92","hashOfConfig":"75"},{"size":2264,"mtime":1614523888540,"results":"93","hashOfConfig":"75"},{"size":611,"mtime":1614523888548,"results":"94","hashOfConfig":"75"},{"size":3579,"mtime":1614523888541,"results":"95","hashOfConfig":"75"},{"size":1841,"mtime":1614523888545,"results":"96","hashOfConfig":"75"},{"size":2300,"mtime":1614523888539,"results":"97","hashOfConfig":"75"},{"size":29,"mtime":1614523887913,"results":"98","hashOfConfig":"75"},{"size":369,"mtime":1614523888568,"results":"99","hashOfConfig":"75"},{"size":961,"mtime":1614523888569,"results":"100","hashOfConfig":"75"},{"size":376,"mtime":1614523888567,"results":"101","hashOfConfig":"75"},{"size":2266,"mtime":1614523888547,"results":"102","hashOfConfig":"75"},{"size":1237,"mtime":1614523888549,"results":"103","hashOfConfig":"75"},{"size":1529,"mtime":1614523888551,"results":"104","hashOfConfig":"75"},{"size":51,"mtime":1614523887914,"results":"105","hashOfConfig":"75"},{"size":29,"mtime":1614523887914,"results":"106","hashOfConfig":"75"},{"size":217,"mtime":1614523887915,"results":"107","hashOfConfig":"75"},{"size":299,"mtime":1614523888553,"results":"108","hashOfConfig":"75"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v29jp",{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"1oywra7",{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"152"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"152"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"152"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"152"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"152"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\epam\\memoryGame\\src\\index.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\App.tsx",["226","227","228","229","230"],"import React, {FC, useCallback, useEffect, useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {Header, Footer, Loader} from \"./components\";\nimport {IState} from \"./common/types\";\nimport {Dispatch} from \"redux\";\nimport { Menu, Rules, Settings, GamePage, ChooseCardsThemes } from \"./containers\";\nimport imageArray from \"./utils/preloadImages\";\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        preloadImage();\n    }, []);\n\n    const preloadImage = () => {\n        setLoading(true);\n        const images = imageArray();\n        let length = images.length;\n        images.forEach((picture) => {\n            const img = new Image();\n            img.src = picture;\n            img.onload = () => {\n                --length;\n                if (length <= 0) {\n                    setLoading(false);\n                }\n            };\n        });\n    };\n\n    return (\n        <>\n            <Router>\n            <div>\n                <Header/>\n                {(loading) ? (<Loader/>) : (\n                    <Switch>\n                        <Route path='/' exact component={Menu}/>\n                        <Route path='/chooseCards' component={ChooseCardsThemes}/>\n                        <Route path='/gameRules' component={Rules}/>\n                        <Route path='/settings' component={Settings}/>\n                        <Route path='/game' component={GamePage}/>\n                    </Switch>\n                )}\n                <Footer/>\n            </div>\n        </Router>\n        </>\n    );\n};\n\nexport default App;\n\n// const mapStateToProps = (state: IState) => ({\n//     errorMessage: state.toast.message,\n// });\n\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\n//     onResetToast: () => dispatch(resetToastMessage()),\n// });\n\n// export const App = connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx",[],["231","232"],"D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Header.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts",["233"],"import { FLIP_CARD, RESTART_GAME, MATCH_CARDS } from './actionTypes/actionTypes';\n\n// export const flipCard = index => ({\n// \ttype: FLIP_CARD,\n// \tindex,\n// });\n\nexport const matchCards = () => ({\n\ttype: MATCH_CARDS,\n});\n\nexport const restartGame = () => ({\n\ttype: RESTART_GAME,\n});\n","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js",[],"D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\index.tsx",[],["234","235"],"D:\\projects\\epam\\memory-game\\client\\src\\App.tsx",["236","237","238","239"],"import React, {FC, useCallback, useEffect, useState} from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport {Header, Footer, Loader} from \"./components\";\r\nimport {IState} from \"./common/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport { Menu, Rules, Settings, Score, GamePage, ChooseCardsThemes } from \"./containers\";\r\nimport imageArray from \"./utils/preloadImages\";\r\n// @ts-ignore\r\nimport fonSound from './assets/sounds/fon.mp3';\r\n// @ts-ignore\r\nimport buttonSound from './assets/sounds/buttonSound.mp3';\r\nimport {config} from './config';\r\n\r\nconst App: FC = () => {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        console.log(config);\r\n        preloadImage();\r\n    }, []);\r\n\r\n    const preloadImage = () => {\r\n        setLoading(true);\r\n        const images = imageArray();\r\n        let length = images.length;\r\n        images.forEach((picture) => {\r\n            const img = new Image();\r\n            img.src = picture;\r\n            img.onload = () => {\r\n                --length;\r\n                if (length <= 0) {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {(loading) ? (<Loader/>) : (\r\n                <Router>\r\n                    <div>\r\n                        <Header/>\r\n\r\n                        <Switch>\r\n                            <Route path='/' exact component={Menu}/>\r\n                            <Route path='/chooseCards' component={ChooseCardsThemes}/>\r\n                            <Route path='/gameRules' component={Rules}/>\r\n                            <Route path='/score' component={Score}/>\r\n                            <Route path='/settings' component={Settings}/>\r\n                            <Route path='/game' component={GamePage}/>\r\n                        </Switch>\r\n\r\n                        <Footer/>\r\n                        <audio id=\"music\" src={fonSound} />\r\n                        <audio id=\"buttonSound\" src={buttonSound} />\r\n                    </div>\r\n                </Router>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n// const mapStateToProps = (state: IState) => ({\r\n//     errorMessage: state.toast.message,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\r\n//     onResetToast: () => dispatch(resetToastMessage()),\r\n// });\r\n\r\n// export const App = connect(mapStateToProps, mapDispatchToProps)(AppContainer);\r\n","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\preloadImages.js",[],["240","241"],"D:\\projects\\epam\\memory-game\\client\\src\\reducers\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\cats\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\architecture\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\winter\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\services\\storage.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Menu.tsx",["242","243","244"],"import React, {FC, useCallback, useRef, useState} from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinkButton from \"../components/LinkButton\";\r\nimport Modal from \"../components/Modal\";\r\n\r\nconst Menu:FC = () => {\r\n//todo\r\n    const handleSound = useCallback(() => {\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <main>\r\n            <Modal title='Welcome' >\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"center\">\r\n                        <LinkButton to={\"/chooseCards\"} text={\"New Game\"} />\r\n                        <LinkButton to={\"/score\"} text={\"High Score\"} />\r\n                        <LinkButton to={\"/gameRules\"} text={\"Rules\"} />\r\n                        <LinkButton to={\"/settings\"} text={\"Settings\"} />\r\n                    </Grid>\r\n            </Modal>\r\n        </main>\r\n    );\r\n};\r\nexport default Menu;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Rules.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Settings.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\GamePage.tsx",["245","246","247","248","249"],"import React, {useState, useEffect, useContext, useMemo, useCallback} from \"react\";\r\nimport { Board, FinalModal } from \"../components\";\r\nimport {CARD_THEMES} from \"./ChooseCardsThemes\";\r\nimport {Storage} from \"../services/storage\";\r\nimport {ISettings} from \"../common/types\";\r\nimport {shuffle} from \"../utils/gameUtils\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst GamePage = () => {\r\n    const classes = useStyles();\r\n    const [flipped, setFlipped] = useState<number[]>([]);\r\n    const [cards, setCards] = useState<any[]>([]);\r\n    const [solved, setSolved] = useState<any[]>([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [flips, setFlips] = useState(0);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [victory, setVictory] = useState(false);\r\n\r\n    const settings = useMemo<ISettings>(() => {\r\n        return new Storage().getSettings();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCards(initDeck(settings));\r\n    }, [settings]);\r\n\r\n    useEffect(() => {\r\n        if (solved.length === 16) {\r\n            setIsRunning(false);\r\n            setVictory(true);\r\n            setModalShow(true);\r\n        }\r\n    }, [solved]);\r\n\r\n    useEffect(() => {\r\n        // if (seconds === 0) {\r\n        //     setIsRunning(false);\r\n            if (solved.length !== 16) {\r\n                setVictory(false);\r\n            }\r\n            setModalShow(true);\r\n        // }\r\n    }, [solved.length]);\r\n\r\n    // useEffect(() => {\r\n    //     if (isRunning) {\r\n    //         const id = window.setInterval(\r\n    //             () => setSeconds((seconds) => seconds - 1),\r\n    //             1000\r\n    //         );\r\n    //         setIntervalId(id);\r\n    //     } else {\r\n    //         // Clear set Interval\r\n    //         window.clearInterval(intervalId);\r\n    //     }\r\n    // }, [isRunning, intervalId]);\r\n\r\n    const onClick = (id: number) => {\r\n        setDisabled(true);\r\n\r\n        // If no cards flipped\r\n        if (flipped.length === 0) {\r\n            if (!sameCardClicked(id)) {\r\n                setFlips((flips) => flips + 1);\r\n            }\r\n            setFlipped([id]);\r\n            setDisabled(false);\r\n            // At least flipped one\r\n        } else {\r\n            if (!sameCardClicked(id)) {\r\n                setFlips((flips) => flips + 1);\r\n            }\r\n\r\n            if (sameCardClicked(id)) {\r\n                setDisabled(false);\r\n                return;\r\n            }\r\n            // if two cards flipped\r\n            setFlipped([flipped[0], id]);\r\n\r\n            // if we get a match\r\n            if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id]);\r\n                // Reset Cards\r\n                setFlipped([]);\r\n                setDisabled(false);\r\n\r\n                // if not a match\r\n            } else {\r\n                setTimeout(() => {\r\n                    // Reset Cards\r\n                    setFlipped([]);\r\n                    setDisabled(false);\r\n                }, 2000);\r\n            }\r\n        }\r\n    };\r\n\r\n    const sameCardClicked = (id: number) => {\r\n        return flipped.includes(id);\r\n    };\r\n\r\n    const isMatch = (id: number) => {\r\n        const clickedCard = cards.find((card) => card.id === id);\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id);\r\n        return flippedCard.type === clickedCard.type;\r\n    };\r\n\r\n    const playAgain = () => {\r\n        setFlipped([]);\r\n        setCards(initDeck(settings));\r\n        setSolved([]);\r\n        setDisabled(false);\r\n        setFlips(0);\r\n        setIsRunning(true);\r\n        setModalShow(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main className={classes.gameContainer}>\r\n                <div className={classes.stats}>\r\n                    <Link to={\"/game\"}><span className={classes.timeAndFlips}>Restart Game</span></Link>\r\n                    <span className={classes.timeAndFlips}>Flips: {flips}</span>\r\n                </div>\r\n                <div className={classes.cardsContainer}>\r\n                    <Board\r\n                        cards={cards}\r\n                        flipped={flipped}\r\n                        onClick={onClick}\r\n                        disabled={disabled}\r\n                        solved={solved}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {modalShow && <FinalModal flips={flips} victory={victory} />}\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n    gameContainer:{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n\r\n        paddingBottom: '1rem',\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            padding: '0 9rem',\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            padding: '0 5rem',\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            padding: '0 3rem',\r\n        },\r\n    },\r\n    stats:{\r\n        fontSize: '3.2rem',\r\n        color: '#fff',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    \"& svg\": {\r\n            verticalAlign: 'middle',\r\n            marginBottom: '10px',\r\n        }\r\n    },\r\n    timeAndFlips:{\r\n        color: '#01c5f1',\r\n        fontFamily: 'Hachi Maru Pop',\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            fontSize: '3rem',\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            fontSize: '2rem',\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: '1.5rem',\r\n        }\r\n    },\r\n    cardsContainer:{\r\n        marginTop: '3rem',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n    }),\r\n);\r\nconst initDeck = (settings: ISettings) => {\r\n    let id = 0;\r\n    let cards: any[] = [];\r\n\r\n    if (CARD_THEMES.WINTER === settings.cardsTheme) {\r\n        cards = ['sin', 'vet', 'yellow', 'sun', 'shar', 'bike']\r\n    } else if (CARD_THEMES.ARCHITECTURE === settings.cardsTheme) {\r\n        cards = ['white','blue','york','orange','sad','stairs']\r\n    } else {\r\n        cards = ['siam','whcat','rusg','tree','kun','eyes'];\r\n    }\r\n    cards = cards.reduce((acc: any, type: string) => {\r\n        return [...acc, {id: id++, type}, {id: id++, type}];\r\n    }, []);\r\n\r\n    return shuffle(cards);\r\n};\r\n\r\n export default GamePage;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\containers\\ChooseCardsThemes.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Footer.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Header.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Card.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Loader.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\FinalModal.tsx",["250","251","252","253","254","255","256","257"],"import React, {FC, useCallback} from \"react\";\r\nimport { GiBackstab, GiCardJoker, GiTrophy } from \"react-icons/gi\";\r\nimport LinkButton from \"../components/LinkButton\";\r\nimport {makeStyles, Theme, ThemeProvider} from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Modal from \"./Modal\";\r\n\r\ninterface IFinalModal {\r\n    victory: boolean;\r\n    flips: number;\r\n}\r\n\r\nconst FinalModal:FC<IFinalModal> = (props:IFinalModal) => {\r\n    const {victory, flips} = props;\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleSubmit = useCallback(() => {\r\n\r\n    }, []);\r\n    return (\r\n\r\n        <div className={classes.modalContainer}>\r\n            <Dialog open={open}>\r\n                <h2 className={classes.title}>Game Over</h2>\r\n                <DialogContent className={classes.content}>\r\n                    <div>{(props.victory) ? (\r\n                        <span className={classes.win}> <GiTrophy /> YOU WIN!! </span>) : (<span className={classes.lose}> <GiBackstab /> YOU LOSE!! </span>\r\n                    )} </div>\r\n                    <div className={classes.joker}><GiCardJoker /> Cards Flipped: {props.flips}</div>\r\n                    <form className={classes.root}>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Your Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        className={classes.margin}\r\n                    />\r\n                    </form>\r\n                </DialogContent>\r\n                <LinkButton to={\"/score\"} text={\"Continue\"} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    modalContainer: {\r\n        marginTop: '4rem',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n\r\n        boxShadow: '0 2rem 5rem 0 rgba(0, 0, 0, 0.2)',\r\n\r\n    },\r\n    title:{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        borderBottom: '1px solid #3288dc',\r\n        color: '#3288dc',\r\n        fontFamily: 'Hachi Maru Pop',\r\n        fontSize: '2.2rem',\r\n        textTransform: 'uppercase',\r\n        padding: '1rem 0',\r\n    },\r\n    content: {\r\n        fontSize: '2rem',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '500px',\r\n        minHeight: '300px',\r\n\r\n        '& svg': {\r\n            verticalAlign: 'middle',\r\n            marginBottom: '8px',\r\n        }\r\n    },\r\n    win:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#47ff44',\r\n        }\r\n    },\r\n    lose:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#ff4444',\r\n        }\r\n    },\r\n    joker:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#01c5f1 ',\r\n        }\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    margin: {\r\n        margin: '2rem',\r\n    },\r\n}));\r\n\r\n\r\n// const theme = createMuiTheme({\r\n//     palette: {\r\n//         primary: green,\r\n//     },\r\n// });\r\n\r\nexport default FinalModal;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\components\\GroupCard.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Board.tsx",["258","259","260"],"import React, {FC, useMemo} from \"react\";\r\nimport { Card } from \"../components\";\r\nimport {Theme, makeStyles, createStyles, createMuiTheme, Grid} from \"@material-ui/core\";\r\n\r\ninterface IBoardProps {\r\n    cards: Array<{id:number, type:string}>;\r\n    flipped: Array<number>;\r\n    solved: Array<number>;\r\n    onClick: (id: number) => void;\r\n    disabled: boolean;\r\n\r\n}\r\nconst Board:FC<IBoardProps> = (props: IBoardProps) => {\r\n    const { cards, flipped, onClick, disabled, solved } = props;\r\n    const classes = useStyles();\r\n\r\n    const series = useMemo(() => {\r\n        const half = splitIntoHalf(cards);\r\n        const quatar_1 = splitIntoHalf(half.first);\r\n        const quatar_2 = splitIntoHalf(half.second);\r\n        return [\r\n            quatar_1.first,\r\n            quatar_1.second,\r\n            quatar_2.first,\r\n            quatar_2.second,\r\n        ]\r\n    }, [cards]);\r\n\r\n\r\n    return (\r\n        <Grid container>\r\n            {series.map((seriesItem, index) => (\r\n                <Grid container item key={`series-${index}`} xs={12} md={6} justify={\"space-around\"} className={classes.gridItem}>\r\n                    {seriesItem.map((card) => (\r\n                        <Grid item key={card.id} xs={4} md={2} >\r\n                            <Card\r\n                                id={card.id}\r\n                                type={card.type}\r\n                                width={100}\r\n                                height={150}\r\n                                flipped={flipped.includes(card.id)}\r\n                                solved={solved.includes(card.id)}\r\n                                onClick={onClick}\r\n                                disabled={disabled || solved.includes(card.id)}\r\n                            />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst splitIntoHalf = (array: any[]) => {\r\n    const half = Math.ceil(array.length / 2);\r\n    return {\r\n        first: array.splice(0, half),\r\n        second: array.splice(-half),\r\n    };\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    board:{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n    },\r\n    gridItem:{\r\n        textAlign: 'center',\r\n    },\r\n\r\n});\r\n\r\nexport default Board;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\gameUtils.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\getImage.ts",["261"],"import { winter1, winter2, winter3, winter4, winter5, winter6} from \"../assets/images/winter\";\r\nimport { architecture1, architecture3, architecture4, architecture5, architecture6, architecture8 } from \"../assets/images/architecture\";\r\nimport { cat1, cat3, cat4, cat5, cat6, cat8 } from \"../assets/images/cats\";\r\n\r\nconst getImage = (type: string) => {\r\n    let image = \"\";\r\n\r\n    const store = {\r\n        \"sin\": winter1,\r\n        \"vet\": winter2,\r\n        \"yellow\": winter3,\r\n        \"sun\": winter4,\r\n        \"shar\": winter5,\r\n        \"bike\": winter6,\r\n        \"white\": architecture1,\r\n        \"blue\": architecture3,\r\n        \"york\": architecture4,\r\n        \"orange\": architecture5,\r\n        \"sad\": architecture6,\r\n        \"stairs\": architecture8,\r\n        \"siam\": cat1,\r\n        \"whcat\": cat3,\r\n        \"rusg\": cat4,\r\n        \"tree\": cat5,\r\n        \"kun\": cat6,\r\n        \"eyes\": cat8,\r\n    };\r\n\r\n    return (store as any)[type];\r\n};\r\n\r\nexport default getImage;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\thunks\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\LinkButton.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Modal.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\PlaySoundButton.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\config.ts",[],{"ruleId":"262","severity":1,"message":"263","line":1,"column":16,"nodeType":"264","messageId":"265","endLine":1,"endColumn":18},{"ruleId":"262","severity":1,"message":"266","line":1,"column":20,"nodeType":"264","messageId":"265","endLine":1,"endColumn":31},{"ruleId":"262","severity":1,"message":"267","line":3,"column":9,"nodeType":"264","messageId":"265","endLine":3,"endColumn":16},{"ruleId":"262","severity":1,"message":"268","line":5,"column":9,"nodeType":"264","messageId":"265","endLine":5,"endColumn":15},{"ruleId":"262","severity":1,"message":"269","line":6,"column":9,"nodeType":"264","messageId":"265","endLine":6,"endColumn":17},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"262","severity":1,"message":"274","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":19},{"ruleId":"270","replacedBy":"275"},{"ruleId":"272","replacedBy":"276"},{"ruleId":"262","severity":1,"message":"266","line":1,"column":20,"nodeType":"264","messageId":"265","endLine":1,"endColumn":31},{"ruleId":"262","severity":1,"message":"267","line":3,"column":9,"nodeType":"264","messageId":"265","endLine":3,"endColumn":16},{"ruleId":"262","severity":1,"message":"268","line":5,"column":9,"nodeType":"264","messageId":"265","endLine":5,"endColumn":15},{"ruleId":"262","severity":1,"message":"269","line":6,"column":9,"nodeType":"264","messageId":"265","endLine":6,"endColumn":17},{"ruleId":"270","replacedBy":"275"},{"ruleId":"272","replacedBy":"276"},{"ruleId":"262","severity":1,"message":"277","line":1,"column":33,"nodeType":"264","messageId":"265","endLine":1,"endColumn":39},{"ruleId":"262","severity":1,"message":"278","line":1,"column":41,"nodeType":"264","messageId":"265","endLine":1,"endColumn":49},{"ruleId":"262","severity":1,"message":"279","line":8,"column":11,"nodeType":"264","messageId":"265","endLine":8,"endColumn":22},{"ruleId":"262","severity":1,"message":"280","line":1,"column":37,"nodeType":"264","messageId":"265","endLine":1,"endColumn":47},{"ruleId":"262","severity":1,"message":"266","line":1,"column":58,"nodeType":"264","messageId":"265","endLine":1,"endColumn":69},{"ruleId":"262","severity":1,"message":"281","line":9,"column":8,"nodeType":"264","messageId":"265","endLine":9,"endColumn":18},{"ruleId":"262","severity":1,"message":"282","line":18,"column":12,"nodeType":"264","messageId":"265","endLine":18,"endColumn":21},{"ruleId":"262","severity":1,"message":"283","line":112,"column":11,"nodeType":"264","messageId":"265","endLine":112,"endColumn":20},{"ruleId":"262","severity":1,"message":"284","line":4,"column":28,"nodeType":"264","messageId":"265","endLine":4,"endColumn":41},{"ruleId":"262","severity":1,"message":"285","line":7,"column":8,"nodeType":"264","messageId":"265","endLine":7,"endColumn":21},{"ruleId":"262","severity":1,"message":"286","line":9,"column":8,"nodeType":"264","messageId":"265","endLine":9,"endColumn":19},{"ruleId":"262","severity":1,"message":"287","line":10,"column":8,"nodeType":"264","messageId":"265","endLine":10,"endColumn":13},{"ruleId":"262","severity":1,"message":"288","line":18,"column":12,"nodeType":"264","messageId":"265","endLine":18,"endColumn":19},{"ruleId":"262","severity":1,"message":"289","line":18,"column":21,"nodeType":"264","messageId":"265","endLine":18,"endColumn":26},{"ruleId":"262","severity":1,"message":"290","line":20,"column":18,"nodeType":"264","messageId":"265","endLine":20,"endColumn":25},{"ruleId":"262","severity":1,"message":"291","line":21,"column":11,"nodeType":"264","messageId":"265","endLine":21,"endColumn":23},{"ruleId":"262","severity":1,"message":"292","line":3,"column":9,"nodeType":"264","messageId":"265","endLine":3,"endColumn":14},{"ruleId":"262","severity":1,"message":"293","line":3,"column":28,"nodeType":"264","messageId":"265","endLine":3,"endColumn":40},{"ruleId":"262","severity":1,"message":"294","line":3,"column":42,"nodeType":"264","messageId":"265","endLine":3,"endColumn":56},{"ruleId":"262","severity":1,"message":"295","line":6,"column":9,"nodeType":"264","messageId":"265","endLine":6,"endColumn":14},"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'connect' is defined but never used.","'IState' is defined but never used.","'Dispatch' is defined but never used.","no-native-reassign",["296"],"no-negated-in-lhs",["297"],"'FLIP_CARD' is defined but never used.",["296"],["297"],"'useRef' is defined but never used.","'useState' is defined but never used.","'handleSound' is assigned a value but never used.","'useContext' is defined but never used.","'classNames' is defined but never used.","'isRunning' is assigned a value but never used.","'playAgain' is assigned a value but never used.","'ThemeProvider' is defined but never used.","'DialogActions' is defined but never used.","'DialogTitle' is defined but never used.","'Modal' is defined but never used.","'victory' is assigned a value but never used.","'flips' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'createMuiTheme' is defined but never used.","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]