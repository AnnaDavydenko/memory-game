[{"D:\\projects\\epam\\memoryGame\\src\\index.tsx":"1","D:\\projects\\epam\\memoryGame\\src\\App.tsx":"2","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts":"3","D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx":"4","D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js":"5","D:\\projects\\epam\\memoryGame\\src\\containers\\index.js":"6","D:\\projects\\epam\\memoryGame\\src\\components\\index.js":"7","D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js":"8","D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js":"9","D:\\projects\\epam\\memoryGame\\src\\components\\Header.js":"10","D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js":"11","D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js":"12","D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js":"13","D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx":"14","D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts":"15","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts":"16","D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx":"17","D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js":"18","D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts":"19","D:\\projects\\epam\\memory-game\\client\\src\\index.tsx":"20","D:\\projects\\epam\\memory-game\\client\\src\\App.tsx":"21","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\index.ts":"22","D:\\projects\\epam\\memory-game\\client\\src\\utils\\preloadImages.js":"23","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\settings.ts":"24","D:\\projects\\epam\\memory-game\\client\\src\\containers\\index.ts":"25","D:\\projects\\epam\\memory-game\\client\\src\\components\\index.ts":"26","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\cats\\index.js":"27","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\architecture\\index.js":"28","D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\winter\\index.js":"29","D:\\projects\\epam\\memory-game\\client\\src\\services\\storage.ts":"30","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Menu.tsx":"31","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Rules.tsx":"32","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Settings.tsx":"33","D:\\projects\\epam\\memory-game\\client\\src\\containers\\GamePage.tsx":"34","D:\\projects\\epam\\memory-game\\client\\src\\containers\\ChooseCardsThemes.tsx":"35","D:\\projects\\epam\\memory-game\\client\\src\\components\\Footer.tsx":"36","D:\\projects\\epam\\memory-game\\client\\src\\components\\Header.tsx":"37","D:\\projects\\epam\\memory-game\\client\\src\\components\\Card.tsx":"38","D:\\projects\\epam\\memory-game\\client\\src\\components\\Loader.tsx":"39","D:\\projects\\epam\\memory-game\\client\\src\\components\\FinalModal.tsx":"40","D:\\projects\\epam\\memory-game\\client\\src\\components\\GroupCard.tsx":"41","D:\\projects\\epam\\memory-game\\client\\src\\components\\Board.tsx":"42","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\index.ts":"43","D:\\projects\\epam\\memory-game\\client\\src\\utils\\gameUtils.ts":"44","D:\\projects\\epam\\memory-game\\client\\src\\utils\\getImage.ts":"45","D:\\projects\\epam\\memory-game\\client\\src\\thunks\\settings.ts":"46","D:\\projects\\epam\\memory-game\\client\\src\\components\\LinkButton.tsx":"47","D:\\projects\\epam\\memory-game\\client\\src\\components\\Modal.tsx":"48","D:\\projects\\epam\\memory-game\\client\\src\\components\\PlaySoundButton.tsx":"49","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\settings.ts":"50","D:\\projects\\epam\\memory-game\\client\\src\\actions\\index.ts":"51","D:\\projects\\epam\\memory-game\\client\\src\\actions\\settings.ts":"52","D:\\projects\\epam\\memory-game\\client\\src\\config.ts":"53","D:\\projects\\epam\\memory-game\\client\\src\\containers\\Score.tsx":"54","D:\\projects\\epam\\memory-game\\client\\src\\reducers\\scores.ts":"55","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\scores.ts":"56","D:\\projects\\epam\\memory-game\\client\\src\\actions\\scores.ts":"57","D:\\projects\\epam\\memory-game\\client\\src\\thunks\\scores.ts":"58","D:\\projects\\epam\\memory-game\\client\\src\\common\\types.ts":"59"},{"size":861,"mtime":1613922384565,"results":"60","hashOfConfig":"61"},{"size":1966,"mtime":1613936060198,"results":"62","hashOfConfig":"61"},{"size":142,"mtime":1613936350117,"results":"63","hashOfConfig":"61"},{"size":1470,"mtime":1610840944000,"results":"64","hashOfConfig":"61"},{"size":687,"mtime":1613904030218,"results":"65","hashOfConfig":"61"},{"size":243,"mtime":1613936316946,"results":"66","hashOfConfig":"61"},{"size":177,"mtime":1613915341553,"results":"67","hashOfConfig":"61"},{"size":1877,"mtime":1613930758083,"results":"68","hashOfConfig":"61"},{"size":2242,"mtime":1613935905267,"results":"69","hashOfConfig":"61"},{"size":640,"mtime":1613936296854,"results":"70","hashOfConfig":"61"},{"size":1313,"mtime":1613936437514,"results":"71","hashOfConfig":"61"},{"size":7005,"mtime":1613936530064,"results":"72","hashOfConfig":"61"},{"size":1530,"mtime":1613934529446,"results":"73","hashOfConfig":"61"},{"size":135,"mtime":1613912832959,"results":"74","hashOfConfig":"61"},{"size":283,"mtime":1613933981201,"results":"75","hashOfConfig":"61"},{"size":124,"mtime":1544784792000,"results":"76","hashOfConfig":"61"},{"size":3431,"mtime":1613923286664,"results":"77","hashOfConfig":"61"},{"size":427,"mtime":1613915905947,"results":"78","hashOfConfig":"61"},{"size":771,"mtime":1613935001899,"results":"79","hashOfConfig":"61"},{"size":834,"mtime":1614710596590,"results":"80","hashOfConfig":"81"},{"size":4085,"mtime":1614799715275,"results":"82","hashOfConfig":"81"},{"size":213,"mtime":1614537403276,"results":"83","hashOfConfig":"81"},{"size":730,"mtime":1614526141806,"results":"84","hashOfConfig":"81"},{"size":773,"mtime":1614779830646,"results":"85","hashOfConfig":"81"},{"size":287,"mtime":1614535397574,"results":"86","hashOfConfig":"81"},{"size":306,"mtime":1614526141787,"results":"87","hashOfConfig":"81"},{"size":258,"mtime":1614526141757,"results":"88","hashOfConfig":"81"},{"size":384,"mtime":1614526141748,"results":"89","hashOfConfig":"81"},{"size":300,"mtime":1614526141770,"results":"90","hashOfConfig":"81"},{"size":965,"mtime":1614799258509,"results":"91","hashOfConfig":"81"},{"size":770,"mtime":1614767915614,"results":"92","hashOfConfig":"81"},{"size":3422,"mtime":1614800581222,"results":"93","hashOfConfig":"81"},{"size":8736,"mtime":1614796284179,"results":"94","hashOfConfig":"81"},{"size":6787,"mtime":1614784560554,"results":"95","hashOfConfig":"81"},{"size":4523,"mtime":1614784281068,"results":"96","hashOfConfig":"81"},{"size":1944,"mtime":1614712758246,"results":"97","hashOfConfig":"81"},{"size":989,"mtime":1614526141784,"results":"98","hashOfConfig":"81"},{"size":2824,"mtime":1614706814432,"results":"99","hashOfConfig":"81"},{"size":625,"mtime":1614682842694,"results":"100","hashOfConfig":"81"},{"size":6663,"mtime":1614710596813,"results":"101","hashOfConfig":"81"},{"size":2018,"mtime":1614684270691,"results":"102","hashOfConfig":"81"},{"size":2300,"mtime":1614526141780,"results":"103","hashOfConfig":"81"},{"size":56,"mtime":1614537403306,"results":"104","hashOfConfig":"81"},{"size":369,"mtime":1614526141805,"results":"105","hashOfConfig":"81"},{"size":961,"mtime":1614526141805,"results":"106","hashOfConfig":"81"},{"size":1213,"mtime":1614795083128,"results":"107","hashOfConfig":"81"},{"size":2217,"mtime":1614609255330,"results":"108","hashOfConfig":"81"},{"size":1255,"mtime":1614767817446,"results":"109","hashOfConfig":"81"},{"size":1533,"mtime":1614608843136,"results":"110","hashOfConfig":"81"},{"size":106,"mtime":1614778568534,"results":"111","hashOfConfig":"81"},{"size":56,"mtime":1614584680059,"results":"112","hashOfConfig":"81"},{"size":378,"mtime":1614778568564,"results":"113","hashOfConfig":"81"},{"size":362,"mtime":1614585288083,"results":"114","hashOfConfig":"81"},{"size":3979,"mtime":1614767915630,"results":"115","hashOfConfig":"81"},{"size":1134,"mtime":1614710596919,"results":"116","hashOfConfig":"81"},{"size":270,"mtime":1614707930244,"results":"117","hashOfConfig":"81"},{"size":275,"mtime":1614619431181,"results":"118","hashOfConfig":"81"},{"size":1458,"mtime":1614708954675,"results":"119","hashOfConfig":"81"},{"size":1052,"mtime":1614707178073,"results":"120","hashOfConfig":"81"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v29jp",{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"1oywra7",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"164"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"164"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"164"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"164"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"164"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\epam\\memoryGame\\src\\index.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\App.tsx",["250","251","252","253","254"],"import React, {FC, useCallback, useEffect, useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {Header, Footer, Loader} from \"./components\";\nimport {IState} from \"./common/types\";\nimport {Dispatch} from \"redux\";\nimport { Menu, Rules, Settings, GamePage, ChooseCardsThemes } from \"./containers\";\nimport imageArray from \"./utils/preloadImages\";\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        preloadImage();\n    }, []);\n\n    const preloadImage = () => {\n        setLoading(true);\n        const images = imageArray();\n        let length = images.length;\n        images.forEach((picture) => {\n            const img = new Image();\n            img.src = picture;\n            img.onload = () => {\n                --length;\n                if (length <= 0) {\n                    setLoading(false);\n                }\n            };\n        });\n    };\n\n    return (\n        <>\n            <Router>\n            <div>\n                <Header/>\n                {(loading) ? (<Loader/>) : (\n                    <Switch>\n                        <Route path='/' exact component={Menu}/>\n                        <Route path='/chooseCards' component={ChooseCardsThemes}/>\n                        <Route path='/gameRules' component={Rules}/>\n                        <Route path='/settings' component={Settings}/>\n                        <Route path='/game' component={GamePage}/>\n                    </Switch>\n                )}\n                <Footer/>\n            </div>\n        </Router>\n        </>\n    );\n};\n\nexport default App;\n\n// const mapStateToProps = (state: IState) => ({\n//     errorMessage: state.toast.message,\n// });\n\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\n//     onResetToast: () => dispatch(resetToastMessage()),\n// });\n\n// export const App = connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx",[],["255","256"],"D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Header.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts",["257"],"import { FLIP_CARD, RESTART_GAME, MATCH_CARDS } from './actionTypes/actionTypes';\n\n// export const flipCard = index => ({\n// \ttype: FLIP_CARD,\n// \tindex,\n// });\n\nexport const matchCards = () => ({\n\ttype: MATCH_CARDS,\n});\n\nexport const restartGame = () => ({\n\ttype: RESTART_GAME,\n});\n","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js",[],"D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\index.tsx",[],["258","259"],"D:\\projects\\epam\\memory-game\\client\\src\\App.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\preloadImages.js",[],["260","261"],"D:\\projects\\epam\\memory-game\\client\\src\\reducers\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\cats\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\architecture\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\assets\\images\\winter\\index.js",[],"D:\\projects\\epam\\memory-game\\client\\src\\services\\storage.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Menu.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Rules.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Settings.tsx",["262","263"],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\GamePage.tsx",["264","265","266"],"import React, {useState, useEffect, useCallback} from \"react\";\r\nimport {Board, FinalModal} from \"../components\";\r\nimport {CARD_THEMES} from \"./ChooseCardsThemes\";\r\nimport {ICard, ISettings, IState} from \"../common/types\";\r\nimport {shuffle} from \"../utils/gameUtils\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\r\nimport {connect} from \"react-redux\";\r\nimport {SOUND_TYPES} from \"./Settings\";\r\n\r\ninterface IProps {\r\n    settings: ISettings;\r\n}\r\n\r\nconst GamePageContainer = (props: IProps) => {\r\n    const classes = useStyles();\r\n\r\n    const {settings} = props;\r\n\r\n    const [flipped, setFlipped] = useState<number[]>([]);\r\n    const [solved, setSolved] = useState<any[]>([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [flips, setFlips] = useState(0);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [cards, setCards] = useState<ICard[]>([]);\r\n\r\n    useEffect(() => {\r\n        setCards(initDeck(settings));\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        const audio = document.querySelector(\"#win\") as HTMLAudioElement;\r\n        if (solved.length === 12) {\r\n            setModalShow(true);\r\n            if (settings.enableMusic) {\r\n                audio.play();\r\n            }\r\n        }\r\n    }, [settings.enableMusic, solved]);\r\n\r\n    const sameCardClicked = useCallback((id: number) => {\r\n        return flipped.includes(id);\r\n    },[flipped]);\r\n\r\n    const isMatch = useCallback((id: number) => {\r\n        const clickedCard = cards.find((card) => card.id === id) as ICard;\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id) as ICard;\r\n        return flippedCard.type === clickedCard.type;\r\n    }, [cards, flipped]);\r\n\r\n    const onClick = useCallback((id: number) => {\r\n        setDisabled(true);\r\n\r\n        // If no cards flipped\r\n        if (flipped.length === 0) {\r\n            if (!sameCardClicked(id)) {\r\n                setFlips((flips) => flips + 1);\r\n            }\r\n            setFlipped([id]);\r\n            setDisabled(false);\r\n            // At least flipped one\r\n        } else {\r\n            if (!sameCardClicked(id)) {\r\n                setFlips((flips) => flips + 1);\r\n            }\r\n\r\n            if (sameCardClicked(id)) {\r\n                setDisabled(false);\r\n                return;\r\n            }\r\n            // if two cards flipped\r\n            setFlipped([flipped[0], id]);\r\n\r\n            // if we get a match\r\n            if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id]);\r\n                // Reset Cards\r\n                setFlipped([]);\r\n                setDisabled(false);\r\n\r\n                // if not a match\r\n            } else {\r\n                setTimeout(() => {\r\n                    // Reset Cards\r\n                    setFlipped([]);\r\n                    setDisabled(false);\r\n                }, 2000);\r\n            }\r\n        }\r\n    }, [ flipped, solved, isMatch, sameCardClicked]);\r\n\r\n    const handleRestart = useCallback(() => {\r\n        const audio = document.querySelector(\"#buttonSound\") as HTMLAudioElement;\r\n        setCards(initDeck(settings));\r\n        setFlipped([]);\r\n        setSolved([]);\r\n        setDisabled(false);\r\n        setFlips(0);\r\n        setModalShow(false);\r\n        if(settings.enableSounds){\r\n            audio.play();\r\n        }\r\n    },[settings]);\r\n\r\n    const handleKeyPress = useCallback((e: KeyboardEvent) => {\r\n        if (e.key === \"r\" || e.key === \"к\") {\r\n            handleRestart();\r\n        }\r\n    }, [handleRestart, settings.enableSounds]);\r\n\r\n    useEffect(() => {\r\n\r\n        document.addEventListener(\"keyup\", handleKeyPress);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", handleKeyPress);\r\n        }\r\n    }, [handleKeyPress]);\r\n\r\n    return (\r\n        <>\r\n            <main className={classes.gameContainer}>\r\n                <div className={classes.stats}>\r\n                    <button onClick={handleRestart} className={classes.restartAndFlips}>Restart Game</button>\r\n                    <span className={classes.restartAndFlips}>Flips: {flips}</span>\r\n                </div>\r\n                <div className={classes.cardsContainer}>\r\n                    <Board\r\n                        cards={[...cards]}\r\n                        flipped={flipped}\r\n                        onClick={onClick}\r\n                        disabled={disabled}\r\n                        solved={solved}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {modalShow && <FinalModal open={modalShow} flips={flips} />}\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n    gameContainer:{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: 'calc(100vh - 150px)',\r\n        overflowY: 'auto',\r\n        paddingBottom: '1rem',\r\n\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            padding: '0 9rem',\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            padding: '0 5rem',\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            padding: '0 3rem',\r\n        },\r\n    },\r\n    stats:{\r\n        fontSize: '3.2rem',\r\n        color: '#fff',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    \"& svg\": {\r\n            verticalAlign: 'middle',\r\n            marginBottom: '10px',\r\n        }\r\n    },\r\n    restartAndFlips:{\r\n        color: '#3288dc',\r\n        fontFamily: 'Hachi Maru Pop',\r\n        background: 'transparent',\r\n        '&:hover':{\r\n            color: '#01c5f1',\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            fontSize: '3rem',\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            fontSize: '2rem',\r\n        },\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: '1.5rem',\r\n        },\r\n\r\n    },\r\n    cardsContainer:{\r\n        marginTop: '3rem',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    }),\r\n);\r\nconst initDeck = (settings: ISettings): ICard[] => {\r\n    let id = 0;\r\n    let cards: any[] = [];\r\n\r\n    if (CARD_THEMES.WINTER === settings.cardsTheme) {\r\n        cards = ['sin', 'vet', 'yellow', 'sun', 'shar', 'bike']\r\n    } else if (CARD_THEMES.ARCHITECTURE === settings.cardsTheme) {\r\n        cards = ['white','blue','york','orange','sad','stairs']\r\n    } else {\r\n        cards = ['siam','whcat','rusg','tree','kun','eyes'];\r\n    }\r\n    cards = cards.reduce((acc: ICard[], type: string) => {\r\n        return [...acc, {id: id++, type}, {id: id++, type}];\r\n    }, []);\r\n\r\n    return shuffle(cards);\r\n};\r\n\r\nconst mapStateToProps = (state: IState) => ({\r\n    settings: state.settings.settings\r\n});\r\n\r\nconst GamePage = connect(mapStateToProps)(GamePageContainer);\r\n\r\n export default GamePage;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\containers\\ChooseCardsThemes.tsx",["267"],"import React, {FC, useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {GroupCard, Loader} from \"../components\";\r\nimport LinkButton from \"../components/LinkButton\";\r\nimport Modal from \"../components/Modal\";\r\nimport {ISettings, IState} from \"../common/types\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport imageArray from \"../utils/preloadImages\";\r\nimport {config} from \"../config\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateSettingsThunk} from \"../thunks/settings\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IRedux {\r\n    settings: ISettings;\r\n}\r\n\r\ninterface IDispatch {\r\n    onUpdateSettings: (settings: ISettings) => void;\r\n}\r\n\r\ntype IProps = IRedux & IDispatch;\r\nexport const CARD_THEMES = {\r\n    WINTER: \"Winter\",\r\n    ARCHITECTURE: \"Architecture\",\r\n    CATS: \"Cats\",\r\n};\r\ninterface ICardItem {\r\n    id: string,\r\n    type: string,\r\n}\r\n\r\nconst ChooseCardsThemesContainer:FC<IProps> = (props: IProps) => {\r\n    const {settings, onUpdateSettings} = props;\r\n    const classes = useStyles();\r\n\r\n    const [activeCardId, setActiveCardId] = useState<string>(\"\");\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const CARDS = useMemo( () => {\r\n        return [{\r\n            id: \"123\",\r\n            type: CARD_THEMES.ARCHITECTURE,\r\n        }, {\r\n            id: \"456\",\r\n            type: CARD_THEMES.CATS,\r\n        }, {\r\n            id: \"789\",\r\n            type: CARD_THEMES.WINTER,\r\n        },]\r\n    },[]);\r\n\r\n    const handleChangeTheme = useCallback((cardItem: ICardItem) => () => {\r\n        const audio = document.querySelector(\"#buttonSound\") as HTMLAudioElement;\r\n        if(settings.enableSounds){\r\n            audio.play();\r\n        }\r\n        settings.cardsTheme = cardItem.type;\r\n        setActiveCardId(cardItem.id);\r\n        onUpdateSettings(settings);\r\n    }, [settings, onUpdateSettings]);\r\n\r\n    const preloadImage = () => {\r\n        setLoading(true);\r\n        const images = imageArray();\r\n        let length = images.length;\r\n        images.forEach((picture) => {\r\n            const img = new Image();\r\n            img.src = picture;\r\n            img.onload = () => {\r\n                --length;\r\n                if (length <= 0) {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        preloadImage();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {(loading) ? (<Loader/>) : (\r\n                    <Modal title='Choose cards'>\r\n                        <div className={classes.cardsContainer}>\r\n                            {CARDS.map((cardItem, index) => (\r\n                                <div key={`id-${index}`}\r\n                                     className={(cardItem.id === activeCardId) ? classes.activeCard : undefined}>\r\n                                    <GroupCard\r\n                                        type={cardItem.type}\r\n                                        onClick={handleChangeTheme(cardItem)}\r\n                                        classes={{image: classes.imageRoot}}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <Grid container className='buttonsContainer'>\r\n                            <LinkButton to={\"/game\"} text={\"Start\"}/>\r\n                            <LinkButton to={\"/\"} text={\"Back\"}/>\r\n                        </Grid>\r\n                    </Modal>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    cardsContainer: {\r\n        marginTop: '2rem',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        marginBottom: '1.5rem',\r\n    },\r\n    buttonsContainer: {\r\n        marginBottom: '1rem',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    imageRoot: {\r\n      width: \"80%\",\r\n    },\r\n    activeCard: {\r\n        transform: 'scale(1.15)',\r\n    },\r\n    notActive: {\r\n        transform: 'none',\r\n    },\r\n\r\n});\r\n\r\nconst mapStateToProps = (state: IState) => ({\r\n    settings: state.settings.settings,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onUpdateSettings: (settings: ISettings) => {\r\n        // @ts-ignore\r\n        dispatch(updateSettingsThunk(settings));\r\n    }\r\n});\r\n\r\nconst ChooseCardsThemes = connect(mapStateToProps, mapDispatchToProps)(ChooseCardsThemesContainer);\r\nexport default ChooseCardsThemes;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\components\\Footer.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Header.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Card.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Loader.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\FinalModal.tsx",["268","269","270","271","272","273"],"import React, {FC, useCallback, useEffect, useState} from \"react\";\r\nimport { GiBackstab, GiCardJoker, GiTrophy } from \"react-icons/gi\";\r\nimport {makeStyles, Theme, ThemeProvider} from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport {useHistory} from \"react-router\";\r\nimport {IScore, ISettings, IState} from \"../common/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateSettingsThunk} from \"../thunks/settings\";\r\nimport {connect} from \"react-redux\";\r\nimport {addScoreThunk} from \"../thunks/scores\";\r\n\r\ninterface IRedux {\r\n    isUpdating: boolean;\r\n}\r\n\r\ninterface IDispatch {\r\n    addScore: (score: IScore) => void;\r\n}\r\ninterface IFinalModal {\r\n    flips: number;\r\n    open: boolean;\r\n}\r\ntype IProps = IFinalModal & IRedux & IDispatch;\r\n\r\nconst FinalModalContainer:FC<IProps> = (props:IProps) => {\r\n    const {open, flips, isUpdating, addScore} = props;\r\n    const classes = useStyles();\r\n    const [name, setName] = useState<string>(\"\");\r\n    const [saving, setSaving] = useState<boolean>(false);\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (saving && !isUpdating) {\r\n            setSaving(false);\r\n            history.push(\"/score\");\r\n        }\r\n    }, [saving, isUpdating, history]);\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        setSaving(true);\r\n        addScore({title: name, value: flips});\r\n    }, [name, flips, addScore]);\r\n\r\n    const handleChangeInput = useCallback((e: any) => {\r\n        setName(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <Zoom in={open}>\r\n            <div className={classes.modalContainer}>\r\n                <Dialog open={open}>\r\n                    <h2 className={classes.title}>Game Over</h2>\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.victory}>\r\n                            <span className={classes.win}> <GiTrophy /> YOU WIN!! </span>\r\n                        </div>\r\n                        <div className={classes.joker}><GiCardJoker /> Cards Flipped: {flips}</div>\r\n                        <form className={classes.root}>\r\n                        <TextField\r\n                            value={name}\r\n                            onChange={handleChangeInput}\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Your Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            InputProps={{\r\n                                classes: {\r\n                                    input: classes.input,\r\n                                },\r\n                            }}\r\n                            InputLabelProps={{\r\n                                classes: {\r\n                                    root: classes.label,\r\n                                    focused: classes.focusedLabel,\r\n                                },\r\n                            }}\r\n                        />\r\n                        </form>\r\n                    </DialogContent>\r\n                    <button onClick={handleSubmit} className={classes.button}>Continue</button>\r\n                </Dialog>\r\n            </div>\r\n        </Zoom>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    modalContainer: {\r\n        marginTop: '4rem',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        boxShadow: '0 2rem 5rem 0 rgba(0, 0, 0, 0.2)',\r\n    },\r\n    title:{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        borderBottom: '1px solid #3288dc',\r\n        color: '#3288dc',\r\n        fontFamily: 'Hachi Maru Pop',\r\n        fontSize: '2.2rem',\r\n        textTransform: 'uppercase',\r\n        padding: '1rem 0',\r\n    },\r\n    content: {\r\n        fontSize: '2rem',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '500px',\r\n        minHeight: '300px',\r\n\r\n        '& svg': {\r\n            verticalAlign: 'middle',\r\n            marginBottom: '8px',\r\n        }\r\n    },\r\n    victory: {\r\n        marginBottom: '1.5rem',\r\n    },\r\n    win:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#47ff44',\r\n        }\r\n    },\r\n    lose:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#ff4444',\r\n        }\r\n    },\r\n    joker:{\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '& svg': {\r\n            color: '#01c5f1 ',\r\n        }\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& .MuiInput-underline:after': {\r\n            borderColor: '#01c5f1',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottom: '2px solid #3288dc',\r\n        },\r\n        '& .MuiInput-underline:hover:before': {\r\n            borderBottom: '2px solid #3288dc',\r\n        },\r\n    },\r\n    input: {\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        fontSize: '1.5rem',\r\n    },\r\n    label: {\r\n        fontFamily: 'Reggae One',\r\n        color: '#3288dc',\r\n        '&$focusedLabel': {\r\n            color: '#01c5f1',\r\n        },\r\n    },\r\n    focusedLabel: {\r\n    },\r\n    button: {\r\n        marginBottom:'1.5rem',\r\n        fontSize: '1.8rem',\r\n        padding: '1rem 7rem',\r\n        color: '#fff',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        alignItems: 'center',\r\n        backgroundImage: 'linear-gradient(120deg, #3a7bd5, #00d2ff)',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.3s',\r\n        fontFamily: 'Reggae One',\r\n        width: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '0 auto',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)',\r\n            boxShadow: '0 1rem 2rem 0 rgba(0, 0, 0, 0.2)',\r\n        },\r\n        '&:focus': {\r\n            outline: 0,\r\n            boxShadow: '0 1rem 2rem 0 rgba(0, 0, 0, 0.2)',\r\n        },\r\n        '&:active': {\r\n            transform: 'scale(1)',\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: IState) => ({\r\n    isUpdating: state.scores.isUpdating\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    addScore: (score: IScore) => {\r\n        // @ts-ignore\r\n        dispatch(addScoreThunk(score));\r\n    }\r\n});\r\n\r\nconst FinalModal = connect(mapStateToProps, mapDispatchToProps)(FinalModalContainer);\r\nexport default FinalModal;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\components\\GroupCard.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\Board.tsx",["274","275","276"],"import React, {FC, useMemo} from \"react\";\r\nimport { Card } from \"../components\";\r\nimport {Theme, makeStyles, createStyles, createMuiTheme, Grid} from \"@material-ui/core\";\r\n\r\ninterface IBoardProps {\r\n    cards: Array<{id:number, type:string}>;\r\n    flipped: Array<number>;\r\n    solved: Array<number>;\r\n    onClick: (id: number) => void;\r\n    disabled: boolean;\r\n\r\n}\r\nconst Board:FC<IBoardProps> = (props: IBoardProps) => {\r\n    const { cards, flipped, onClick, disabled, solved } = props;\r\n    const classes = useStyles();\r\n\r\n    const series = useMemo(() => {\r\n        const half = splitIntoHalf(cards);\r\n        const quatar_1 = splitIntoHalf(half.first);\r\n        const quatar_2 = splitIntoHalf(half.second);\r\n        return [\r\n            quatar_1.first,\r\n            quatar_1.second,\r\n            quatar_2.first,\r\n            quatar_2.second,\r\n        ]\r\n    }, [cards]);\r\n\r\n\r\n    return (\r\n        <Grid container>\r\n            {series.map((seriesItem, index) => (\r\n                <Grid container item key={`series-${index}`} xs={12} md={6} justify={\"space-around\"} className={classes.gridItem}>\r\n                    {seriesItem.map((card) => (\r\n                        <Grid item key={card.id} xs={4} md={2} >\r\n                            <Card\r\n                                id={card.id}\r\n                                type={card.type}\r\n                                width={100}\r\n                                height={150}\r\n                                flipped={flipped.includes(card.id)}\r\n                                solved={solved.includes(card.id)}\r\n                                onClick={onClick}\r\n                                disabled={disabled || solved.includes(card.id)}\r\n                            />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst splitIntoHalf = (array: any[]) => {\r\n    const half = Math.ceil(array.length / 2);\r\n    return {\r\n        first: array.splice(0, half),\r\n        second: array.splice(-half),\r\n    };\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    board:{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n    },\r\n    gridItem:{\r\n        textAlign: 'center',\r\n    },\r\n\r\n});\r\n\r\nexport default Board;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\gameUtils.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\utils\\getImage.ts",["277"],"import { winter1, winter2, winter3, winter4, winter5, winter6} from \"../assets/images/winter\";\r\nimport { architecture1, architecture3, architecture4, architecture5, architecture6, architecture8 } from \"../assets/images/architecture\";\r\nimport { cat1, cat3, cat4, cat5, cat6, cat8 } from \"../assets/images/cats\";\r\n\r\nconst getImage = (type: string) => {\r\n    let image = \"\";\r\n\r\n    const store = {\r\n        \"sin\": winter1,\r\n        \"vet\": winter2,\r\n        \"yellow\": winter3,\r\n        \"sun\": winter4,\r\n        \"shar\": winter5,\r\n        \"bike\": winter6,\r\n        \"white\": architecture1,\r\n        \"blue\": architecture3,\r\n        \"york\": architecture4,\r\n        \"orange\": architecture5,\r\n        \"sad\": architecture6,\r\n        \"stairs\": architecture8,\r\n        \"siam\": cat1,\r\n        \"whcat\": cat3,\r\n        \"rusg\": cat4,\r\n        \"tree\": cat5,\r\n        \"kun\": cat6,\r\n        \"eyes\": cat8,\r\n    };\r\n\r\n    return (store as any)[type];\r\n};\r\n\r\nexport default getImage;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\thunks\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\LinkButton.tsx",["278","279"],"import React, {FC, useCallback, useRef} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n// @ts-ignore\r\nimport buttonSound from \"../assets/sounds/buttonSound.mp3\";\r\nimport {ISettings, IState} from \"../common/types\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IRedux {\r\n    storageSettings: ISettings;\r\n}\r\n\r\ninterface ILinkProps {\r\n    text: string;\r\n    to: string;\r\n}\r\ntype IProps = ILinkProps & IRedux;\r\n\r\nconst LinkButtonContainer: FC<IProps> = (props: IProps) => {\r\n    const {text, to, storageSettings} = props;\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    const handleClick = useCallback(() => {\r\n        const audio = document.querySelector(\"#buttonSound\") as HTMLAudioElement;\r\n        if(storageSettings.enableSounds){\r\n            audio.play();\r\n        }\r\n        setTimeout(() => {\r\n            history.push(to);\r\n        }, 250);\r\n    }, [history, to, storageSettings]);\r\n\r\n    return (\r\n        <>\r\n            <button className={classes.button} onClick={handleClick} >\r\n                {text}\r\n            </button>\r\n        </>\r\n    );\r\n};\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginBottom:'1.5rem',\r\n        fontSize: '1.8rem',\r\n        padding: '1rem 7rem',\r\n        color: '#fff',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        alignItems: 'center',\r\n        backgroundImage: 'linear-gradient(120deg, #3a7bd5, #00d2ff)',\r\n        cursor: 'pointer',\r\n        transition: 'all 0.3s',\r\n        fontFamily: 'Reggae One',\r\n        width: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '0 auto',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)',\r\n            boxShadow: '0 1rem 2rem 0 rgba(0, 0, 0, 0.2)',\r\n        },\r\n        '&:focus': {\r\n            outline: 0,\r\n            boxShadow: '0 1rem 2rem 0 rgba(0, 0, 0, 0.2)',\r\n        },\r\n        '&:active': {\r\n            transform: 'scale(1)',\r\n        },\r\n    },\r\n});\r\n\r\nconst mapStateToProps = (state: IState) => ({\r\n    storageSettings: state.settings.settings,\r\n});\r\n\r\nconst LinkButton = connect(mapStateToProps)(LinkButtonContainer);\r\n\r\nexport default LinkButton;\r\n","D:\\projects\\epam\\memory-game\\client\\src\\components\\Modal.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\components\\PlaySoundButton.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\index.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\settings.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\config.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\containers\\Score.tsx",[],"D:\\projects\\epam\\memory-game\\client\\src\\reducers\\scores.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\actionTypes\\scores.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\actions\\scores.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\thunks\\scores.ts",[],"D:\\projects\\epam\\memory-game\\client\\src\\common\\types.ts",[],{"ruleId":"280","severity":1,"message":"281","line":1,"column":16,"nodeType":"282","messageId":"283","endLine":1,"endColumn":18},{"ruleId":"280","severity":1,"message":"284","line":1,"column":20,"nodeType":"282","messageId":"283","endLine":1,"endColumn":31},{"ruleId":"280","severity":1,"message":"285","line":3,"column":9,"nodeType":"282","messageId":"283","endLine":3,"endColumn":16},{"ruleId":"280","severity":1,"message":"286","line":5,"column":9,"nodeType":"282","messageId":"283","endLine":5,"endColumn":15},{"ruleId":"280","severity":1,"message":"287","line":6,"column":9,"nodeType":"282","messageId":"283","endLine":6,"endColumn":17},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"280","severity":1,"message":"292","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":19},{"ruleId":"288","replacedBy":"293"},{"ruleId":"290","replacedBy":"294"},{"ruleId":"288","replacedBy":"293"},{"ruleId":"290","replacedBy":"294"},{"ruleId":"280","severity":1,"message":"295","line":1,"column":20,"nodeType":"282","messageId":"283","endLine":1,"endColumn":28},{"ruleId":"280","severity":1,"message":"296","line":1,"column":43,"nodeType":"282","messageId":"283","endLine":1,"endColumn":52},{"ruleId":"280","severity":1,"message":"297","line":8,"column":9,"nodeType":"282","messageId":"283","endLine":8,"endColumn":20},{"ruleId":"298","severity":1,"message":"299","line":28,"column":7,"nodeType":"300","endLine":28,"endColumn":9,"suggestions":"301"},{"ruleId":"298","severity":1,"message":"302","line":108,"column":8,"nodeType":"300","endLine":108,"endColumn":46,"suggestions":"303"},{"ruleId":"280","severity":1,"message":"304","line":9,"column":9,"nodeType":"282","messageId":"283","endLine":9,"endColumn":15},{"ruleId":"280","severity":1,"message":"305","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":20},{"ruleId":"280","severity":1,"message":"306","line":3,"column":21,"nodeType":"282","messageId":"283","endLine":3,"endColumn":26},{"ruleId":"280","severity":1,"message":"307","line":3,"column":28,"nodeType":"282","messageId":"283","endLine":3,"endColumn":41},{"ruleId":"280","severity":1,"message":"308","line":9,"column":17,"nodeType":"282","messageId":"283","endLine":9,"endColumn":26},{"ruleId":"280","severity":1,"message":"286","line":9,"column":28,"nodeType":"282","messageId":"283","endLine":9,"endColumn":34},{"ruleId":"280","severity":1,"message":"309","line":11,"column":9,"nodeType":"282","messageId":"283","endLine":11,"endColumn":28},{"ruleId":"280","severity":1,"message":"306","line":3,"column":9,"nodeType":"282","messageId":"283","endLine":3,"endColumn":14},{"ruleId":"280","severity":1,"message":"310","line":3,"column":28,"nodeType":"282","messageId":"283","endLine":3,"endColumn":40},{"ruleId":"280","severity":1,"message":"311","line":3,"column":42,"nodeType":"282","messageId":"283","endLine":3,"endColumn":56},{"ruleId":"280","severity":1,"message":"312","line":6,"column":9,"nodeType":"282","messageId":"283","endLine":6,"endColumn":14},{"ruleId":"280","severity":1,"message":"313","line":1,"column":33,"nodeType":"282","messageId":"283","endLine":1,"endColumn":39},{"ruleId":"280","severity":1,"message":"314","line":5,"column":8,"nodeType":"282","messageId":"283","endLine":5,"endColumn":19},"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'connect' is defined but never used.","'IState' is defined but never used.","'Dispatch' is defined but never used.","no-native-reassign",["315"],"no-negated-in-lhs",["316"],"'FLIP_CARD' is defined but never used.",["315"],["316"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'SOUND_TYPES' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array.","ArrayExpression",["317"],"React Hook useCallback has an unnecessary dependency: 'settings.enableSounds'. Either exclude it or remove the dependency array.",["318"],"'config' is defined but never used.","'GiBackstab' is defined but never used.","'Theme' is defined but never used.","'ThemeProvider' is defined but never used.","'ISettings' is defined but never used.","'updateSettingsThunk' is defined but never used.","'createStyles' is defined but never used.","'createMuiTheme' is defined but never used.","'image' is assigned a value but never used.","'useRef' is defined but never used.","'buttonSound' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},"Update the dependencies array to be: [settings]",{"range":"323","text":"324"},"Update the dependencies array to be: [handleRestart]",{"range":"325","text":"326"},[976,978],"[settings]",[3484,3522],"[handleRestart]"]