[{"D:\\projects\\epam\\memoryGame\\src\\index.tsx":"1","D:\\projects\\epam\\memoryGame\\src\\App.tsx":"2","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts":"3","D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx":"4","D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js":"5","D:\\projects\\epam\\memoryGame\\src\\containers\\index.js":"6","D:\\projects\\epam\\memoryGame\\src\\components\\index.js":"7","D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js":"8","D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js":"9","D:\\projects\\epam\\memoryGame\\src\\components\\Header.js":"10","D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js":"11","D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js":"12","D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js":"13","D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx":"14","D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts":"15","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts":"16","D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx":"17","D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js":"18","D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts":"19","D:\\projects\\epam\\memory-game\\src\\index.tsx":"20","D:\\projects\\epam\\memory-game\\src\\App.tsx":"21","D:\\projects\\epam\\memory-game\\src\\reducers\\index.ts":"22","D:\\projects\\epam\\memory-game\\src\\utils\\preloadImages.js":"23","D:\\projects\\epam\\memory-game\\src\\reducers\\memory.ts":"24","D:\\projects\\epam\\memory-game\\src\\assets\\images\\cats\\index.js":"25","D:\\projects\\epam\\memory-game\\src\\assets\\images\\winter\\index.js":"26","D:\\projects\\epam\\memory-game\\src\\assets\\images\\architecture\\index.js":"27","D:\\projects\\epam\\memory-game\\src\\actions\\actionTypes\\actionTypes.ts":"28","D:\\projects\\epam\\memory-game\\src\\components\\Loader.tsx":"29","D:\\projects\\epam\\memory-game\\src\\containers\\ChooseCardsThemes.tsx":"30","D:\\projects\\epam\\memory-game\\src\\containers\\Settings.tsx":"31","D:\\projects\\epam\\memory-game\\src\\actions\\actions.ts":"32","D:\\projects\\epam\\memory-game\\src\\components\\LinkButton.tsx":"33","D:\\projects\\epam\\memory-game\\src\\components\\Modal.tsx":"34","D:\\projects\\epam\\memory-game\\src\\components\\PlaySoundButton.tsx":"35","D:\\projects\\epam\\memory-game\\src\\components\\Footer.tsx":"36","D:\\projects\\epam\\memory-game\\src\\components\\Header.tsx":"37","D:\\projects\\epam\\memory-game\\src\\containers\\index.ts":"38","D:\\projects\\epam\\memory-game\\src\\components\\index.ts":"39","D:\\projects\\epam\\memory-game\\src\\containers\\Rules.tsx":"40","D:\\projects\\epam\\memory-game\\src\\containers\\Menu.tsx":"41","D:\\projects\\epam\\memory-game\\src\\components\\GroupCard.tsx":"42","D:\\projects\\epam\\memory-game\\src\\containers\\GamePage.tsx":"43","D:\\projects\\epam\\memory-game\\src\\components\\Card.tsx":"44","D:\\projects\\epam\\memory-game\\src\\utils\\gameUtils.ts":"45","D:\\projects\\epam\\memory-game\\src\\services\\storage.ts":"46","D:\\projects\\epam\\memory-game\\src\\utils\\getImage.ts":"47","D:\\projects\\epam\\memory-game\\src\\components\\Board.tsx":"48","D:\\projects\\epam\\memory-game\\src\\components\\FinalModal.tsx":"49"},{"size":861,"mtime":1613922384565,"results":"50","hashOfConfig":"51"},{"size":1966,"mtime":1613936060198,"results":"52","hashOfConfig":"51"},{"size":142,"mtime":1613936350117,"results":"53","hashOfConfig":"51"},{"size":1470,"mtime":1610840944000,"results":"54","hashOfConfig":"51"},{"size":687,"mtime":1613904030218,"results":"55","hashOfConfig":"51"},{"size":243,"mtime":1613936316946,"results":"56","hashOfConfig":"51"},{"size":177,"mtime":1613915341553,"results":"57","hashOfConfig":"51"},{"size":1877,"mtime":1613930758083,"results":"58","hashOfConfig":"51"},{"size":2242,"mtime":1613935905267,"results":"59","hashOfConfig":"51"},{"size":640,"mtime":1613936296854,"results":"60","hashOfConfig":"51"},{"size":1313,"mtime":1613936437514,"results":"61","hashOfConfig":"51"},{"size":7005,"mtime":1613936530064,"results":"62","hashOfConfig":"51"},{"size":1530,"mtime":1613934529446,"results":"63","hashOfConfig":"51"},{"size":135,"mtime":1613912832959,"results":"64","hashOfConfig":"51"},{"size":283,"mtime":1613933981201,"results":"65","hashOfConfig":"51"},{"size":124,"mtime":1544784792000,"results":"66","hashOfConfig":"51"},{"size":3431,"mtime":1613923286664,"results":"67","hashOfConfig":"51"},{"size":427,"mtime":1613915905947,"results":"68","hashOfConfig":"51"},{"size":771,"mtime":1613935001899,"results":"69","hashOfConfig":"51"},{"size":861,"mtime":1613922384565,"results":"70","hashOfConfig":"71"},{"size":2247,"mtime":1614168339616,"results":"72","hashOfConfig":"71"},{"size":142,"mtime":1613936350117,"results":"73","hashOfConfig":"71"},{"size":717,"mtime":1614273104156,"results":"74","hashOfConfig":"71"},{"size":771,"mtime":1613935001899,"results":"75","hashOfConfig":"71"},{"size":249,"mtime":1614272563284,"results":"76","hashOfConfig":"71"},{"size":291,"mtime":1614273290089,"results":"77","hashOfConfig":"71"},{"size":375,"mtime":1614273290089,"results":"78","hashOfConfig":"71"},{"size":124,"mtime":1544784792000,"results":"79","hashOfConfig":"71"},{"size":585,"mtime":1614070131631,"results":"80","hashOfConfig":"71"},{"size":2470,"mtime":1614257848086,"results":"81","hashOfConfig":"71"},{"size":6316,"mtime":1614192740100,"results":"82","hashOfConfig":"71"},{"size":283,"mtime":1613933981201,"results":"83","hashOfConfig":"71"},{"size":1279,"mtime":1614257135358,"results":"84","hashOfConfig":"71"},{"size":1160,"mtime":1614273912703,"results":"85","hashOfConfig":"71"},{"size":1594,"mtime":1614166661309,"results":"86","hashOfConfig":"71"},{"size":1904,"mtime":1614274032939,"results":"87","hashOfConfig":"71"},{"size":957,"mtime":1614274456069,"results":"88","hashOfConfig":"71"},{"size":282,"mtime":1613994006887,"results":"89","hashOfConfig":"71"},{"size":297,"mtime":1614261414712,"results":"90","hashOfConfig":"71"},{"size":1443,"mtime":1614166870292,"results":"91","hashOfConfig":"71"},{"size":1078,"mtime":1614166870279,"results":"92","hashOfConfig":"71"},{"size":1697,"mtime":1614261414613,"results":"93","hashOfConfig":"71"},{"size":6312,"mtime":1614277944094,"results":"94","hashOfConfig":"71"},{"size":2178,"mtime":1614271685543,"results":"95","hashOfConfig":"71"},{"size":369,"mtime":1614192740160,"results":"96","hashOfConfig":"71"},{"size":926,"mtime":1614247304271,"results":"97","hashOfConfig":"71"},{"size":961,"mtime":1614273104166,"results":"98","hashOfConfig":"71"},{"size":2859,"mtime":1614284460737,"results":"99","hashOfConfig":"71"},{"size":1032,"mtime":1614263842643,"results":"100","hashOfConfig":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v29jp",{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"iccy2h",{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"144"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"144"},"D:\\projects\\epam\\memoryGame\\src\\index.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\App.tsx",["210","211","212","213","214"],"import React, {FC, useCallback, useEffect, useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {Header, Footer, Loader} from \"./components\";\nimport {IState} from \"./common/types\";\nimport {Dispatch} from \"redux\";\nimport { Menu, Rules, Settings, GamePage, ChooseCardsThemes } from \"./containers\";\nimport imageArray from \"./utils/preloadImages\";\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        preloadImage();\n    }, []);\n\n    const preloadImage = () => {\n        setLoading(true);\n        const images = imageArray();\n        let length = images.length;\n        images.forEach((picture) => {\n            const img = new Image();\n            img.src = picture;\n            img.onload = () => {\n                --length;\n                if (length <= 0) {\n                    setLoading(false);\n                }\n            };\n        });\n    };\n\n    return (\n        <>\n            <Router>\n            <div>\n                <Header/>\n                {(loading) ? (<Loader/>) : (\n                    <Switch>\n                        <Route path='/' exact component={Menu}/>\n                        <Route path='/chooseCards' component={ChooseCardsThemes}/>\n                        <Route path='/gameRules' component={Rules}/>\n                        <Route path='/settings' component={Settings}/>\n                        <Route path='/game' component={GamePage}/>\n                    </Switch>\n                )}\n                <Footer/>\n            </div>\n        </Router>\n        </>\n    );\n};\n\nexport default App;\n\n// const mapStateToProps = (state: IState) => ({\n//     errorMessage: state.toast.message,\n// });\n\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\n//     onResetToast: () => dispatch(resetToastMessage()),\n// });\n\n// export const App = connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","D:\\projects\\epam\\memoryGame\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Loader.tsx",[],["215","216"],"D:\\projects\\epam\\memoryGame\\src\\utils\\preloadImages.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\index.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Menu.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Rules.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Header.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\GroupCard.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\GamePage.js",[],"D:\\projects\\epam\\memoryGame\\src\\components\\Footer.js",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\Settings.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\actions\\actions.ts",["217"],"import { FLIP_CARD, RESTART_GAME, MATCH_CARDS } from './actionTypes/actionTypes';\n\n// export const flipCard = index => ({\n// \ttype: FLIP_CARD,\n// \tindex,\n// });\n\nexport const matchCards = () => ({\n\ttype: MATCH_CARDS,\n});\n\nexport const restartGame = () => ({\n\ttype: RESTART_GAME,\n});\n","D:\\projects\\epam\\memoryGame\\src\\actions\\actionTypes\\actionTypes.ts",[],"D:\\projects\\epam\\memoryGame\\src\\containers\\ChooseCardsThemes.tsx",[],"D:\\projects\\epam\\memoryGame\\src\\utils\\useTheme.js",[],"D:\\projects\\epam\\memoryGame\\src\\reducers\\memory.ts",[],"D:\\projects\\epam\\memory-game\\src\\index.tsx",[],["218","219"],"D:\\projects\\epam\\memory-game\\src\\App.tsx",["220","221","222","223"],"import React, {FC, useCallback, useEffect, useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {Header, Footer, Loader} from \"./components\";\nimport {IState} from \"./common/types\";\nimport {Dispatch} from \"redux\";\nimport { Menu, Rules, Settings, Score, GamePage, ChooseCardsThemes } from \"./containers\";\nimport imageArray from \"./utils/preloadImages\";\n// @ts-ignore\nimport fonSound from './assets/sounds/fon.mp3';\n\nconst App: FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    useEffect(() => {\n        preloadImage();\n    }, []);\n\n    const preloadImage = () => {\n        setLoading(true);\n        const images = imageArray();\n        let length = images.length;\n        images.forEach((picture) => {\n            const img = new Image();\n            img.src = picture;\n            img.onload = () => {\n                --length;\n                if (length <= 0) {\n                    setLoading(false);\n                }\n            };\n        });\n    };\n\n    return (\n        <>\n            {(loading) ? (<Loader/>) : (\n                <Router>\n                    <div>\n                        <Header/>\n\n                        <Switch>\n                            <Route path='/' exact component={Menu}/>\n                            <Route path='/chooseCards' component={ChooseCardsThemes}/>\n                            <Route path='/gameRules' component={Rules}/>\n                            <Route path='/score' component={Score}/>\n                            <Route path='/settings' component={Settings}/>\n                            <Route path='/game' component={GamePage}/>\n                        </Switch>\n\n                        <Footer/>\n                        <audio id=\"megaSound\" src={fonSound} />\n                    </div>\n                </Router>\n            )}\n        </>\n    );\n};\n\nexport default App;\n\n// const mapStateToProps = (state: IState) => ({\n//     errorMessage: state.toast.message,\n// });\n\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\n//     onResetToast: () => dispatch(resetToastMessage()),\n// });\n\n// export const App = connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","D:\\projects\\epam\\memory-game\\src\\reducers\\index.ts",[],"D:\\projects\\epam\\memory-game\\src\\utils\\preloadImages.js",[],["224","225"],"D:\\projects\\epam\\memory-game\\src\\reducers\\memory.ts",[],"D:\\projects\\epam\\memory-game\\src\\assets\\images\\cats\\index.js",[],"D:\\projects\\epam\\memory-game\\src\\assets\\images\\winter\\index.js",[],"D:\\projects\\epam\\memory-game\\src\\assets\\images\\architecture\\index.js",[],"D:\\projects\\epam\\memory-game\\src\\actions\\actionTypes\\actionTypes.ts",[],"D:\\projects\\epam\\memory-game\\src\\components\\Loader.tsx",[],"D:\\projects\\epam\\memory-game\\src\\containers\\ChooseCardsThemes.tsx",[],"D:\\projects\\epam\\memory-game\\src\\containers\\Settings.tsx",[],"D:\\projects\\epam\\memory-game\\src\\actions\\actions.ts",["226"],["227","228"],"D:\\projects\\epam\\memory-game\\src\\components\\LinkButton.tsx",[],"D:\\projects\\epam\\memory-game\\src\\components\\Modal.tsx",[],"D:\\projects\\epam\\memory-game\\src\\components\\PlaySoundButton.tsx",["229"],"import React, {FC, useCallback, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\n// @ts-ignore\nimport fonSound from '../assets/sounds/fon.mp3';\nimport { IoMdVolumeHigh } from \"react-icons/io\";\nimport { IoMdVolumeOff } from \"react-icons/io\";\n\nconst PlaySoundButton: FC = () => {\n\n    const [play, setPlay] = useState<boolean>(false);\n    const classes = useStyles();\n\n    const handlePlay = useCallback(() => {\n        const audio = document.querySelector(\"#megaSound\") as HTMLAudioElement;\n        setPlay(true);\n        audio.play();\n    }, []);\n\n    const handlePause = useCallback(() => {\n        const audio = document.querySelector(\"#megaSound\") as HTMLAudioElement;\n        setPlay(false);\n        audio.pause();\n    }, []);\n\n    return (\n        <>\n            {play && (<button onClick={handlePause} className={classes.button} title={'Disable music'}>\n                <span className={classes.icon}>\n                    <IoMdVolumeHigh />\n                </span>\n            </button>)}\n            {!play && (<button onClick={handlePlay} className={classes.button} title={'Enable music'}>\n                <span className={classes.icon}>\n                    <IoMdVolumeOff />\n                </span>\n            </button>)}\n        </>\n    )\n};\n\nconst useStyles = makeStyles({\n    icon: {\n        paddingLeft: '0.5rem',\n        color: '#01c5f1 ',\n        fontSize: '2rem',\n        display: 'flex',\n        '& svg': {\n            verticalAlign: 'middle',\n        },\n    },\n    button: {\n        background: 'transparent',\n    },\n\n});\nexport default PlaySoundButton;\n","D:\\projects\\epam\\memory-game\\src\\components\\Footer.tsx",[],"D:\\projects\\epam\\memory-game\\src\\components\\Header.tsx",[],"D:\\projects\\epam\\memory-game\\src\\containers\\index.ts",[],"D:\\projects\\epam\\memory-game\\src\\components\\index.ts",[],"D:\\projects\\epam\\memory-game\\src\\containers\\Rules.tsx",[],"D:\\projects\\epam\\memory-game\\src\\containers\\Menu.tsx",[],"D:\\projects\\epam\\memory-game\\src\\components\\GroupCard.tsx",[],"D:\\projects\\epam\\memory-game\\src\\containers\\GamePage.tsx",["230","231","232","233","234"],"import React, {useState, useEffect, useContext, useMemo} from \"react\";\nimport { Board, FinalModal } from \"../components\";\nimport {CARD_THEMES} from \"./ChooseCardsThemes\";\nimport {Storage} from \"../services/storage\";\nimport {ISettings} from \"../common/types\";\nimport {shuffle} from \"../utils/gameUtils\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\n\nconst GamePage = () => {\n    const classes = useStyles();\n    const [flipped, setFlipped] = useState<number[]>([]);\n    const [cards, setCards] = useState<any[]>([]);\n    const [solved, setSolved] = useState<any[]>([]);\n    const [disabled, setDisabled] = useState(false);\n    const [flips, setFlips] = useState(0);\n    const [seconds, setSeconds] = useState(100);\n    const [isRunning, setIsRunning] = useState(true);\n    const [intervalId, setIntervalId] = useState<any>(null);\n    const [modalShow, setModalShow] = useState(false);\n    const [victory, setVictory] = useState(false);\n\n    const settings = useMemo<ISettings>(() => {\n        return new Storage().getSettings();\n    }, []);\n\n    useEffect(() => {\n        setCards(initDeck(settings));\n    }, [settings]);\n\n    useEffect(() => {\n        if (solved.length === 16) {\n            setIsRunning(false);\n            setVictory(true);\n            setModalShow(true);\n        }\n    }, [solved]);\n\n    useEffect(() => {\n        if (seconds === 0) {\n            setIsRunning(false);\n            if (solved.length !== 16) {\n                setVictory(false);\n            }\n            setModalShow(true);\n        }\n    }, [seconds, solved.length]);\n\n    useEffect(() => {\n        if (isRunning) {\n            const id = window.setInterval(\n                () => setSeconds((seconds) => seconds - 1),\n                1000\n            );\n            setIntervalId(id);\n        } else {\n            // Clear set Interval\n            window.clearInterval(intervalId);\n        }\n    }, [isRunning, intervalId]);\n\n    const onClick = (id: number) => {\n        setDisabled(true);\n\n        // If no cards flipped\n        if (flipped.length === 0) {\n            if (!sameCardClicked(id)) {\n                setFlips((flips) => flips + 1);\n            }\n            setFlipped([id]);\n            setDisabled(false);\n            // At least flipped one\n        } else {\n            if (!sameCardClicked(id)) {\n                setFlips((flips) => flips + 1);\n            }\n\n            if (sameCardClicked(id)) {\n                setDisabled(false);\n                return;\n            }\n            // if two cards flipped\n            setFlipped([flipped[0], id]);\n\n            // if we get a match\n            if (isMatch(id)) {\n                setSolved([...solved, flipped[0], id]);\n                // Reset Cards\n                setFlipped([]);\n                setDisabled(false);\n\n                // if not a match\n            } else {\n                setTimeout(() => {\n                    // Reset Cards\n                    setFlipped([]);\n                    setDisabled(false);\n                }, 2000);\n            }\n        }\n    };\n\n    const sameCardClicked = (id: number) => {\n        return flipped.includes(id);\n    };\n\n    const isMatch = (id: number) => {\n        const clickedCard = cards.find((card) => card.id === id);\n        const flippedCard = cards.find((card) => flipped[0] === card.id);\n        return flippedCard.type === clickedCard.type;\n    };\n\n    const playAgain = () => {\n        setFlipped([]);\n        setCards(initDeck(settings));\n        setSolved([]);\n        setDisabled(false);\n        setFlips(0);\n        setSeconds(100);\n        setIsRunning(true);\n        setModalShow(false);\n    };\n\n    return (\n        <>\n            <main className={classes.gameContainer}>\n                <div className={classes.stats}>\n                    <span className={classes.timeAndFlips}>Time: {seconds} sec</span>\n                    <span className={classes.timeAndFlips}>Flips: {flips}</span>\n                </div>\n                <div className={classes.cardsContainer}>\n                    <Board\n                        cards={cards}\n                        flipped={flipped}\n                        onClick={onClick}\n                        disabled={disabled}\n                        solved={solved}\n                    />\n                </div>\n                {/*<div>*/}\n                {/*    <FinalModal visible={modalShow} onClose={() => setModalShow(false)} time={seconds} flips={flips} onPlayAgain={playAgain} victory={victory} />*/}\n                {/*</div>*/}\n            </main>\n        </>\n    );\n};\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n    gameContainer:{\n        display: 'flex',\n        flexDirection: 'column',\n\n        paddingBottom: '1rem',\n        [theme.breakpoints.up(\"md\")]: {\n            padding: '0 9rem',\n        },\n        [theme.breakpoints.up(\"sm\")]: {\n            padding: '0 5rem',\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            padding: '0 3rem',\n        },\n    },\n    stats:{\n        fontSize: '3.2rem',\n        color: '#fff',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    \"& svg\": {\n            verticalAlign: 'middle',\n            marginBottom: '10px',\n        }\n    },\n    timeAndFlips:{\n        color: '#01c5f1',\n        fontFamily: 'Hachi Maru Pop',\n        [theme.breakpoints.up(\"lg\")]: {\n            fontSize: '3rem',\n        },\n        [theme.breakpoints.up(\"md\")]: {\n            fontSize: '2rem',\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            fontSize: '1.5rem',\n        }\n    },\n    cardsContainer:{\n        marginTop: '3rem',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n\n    }),\n);\nconst initDeck = (settings: ISettings) => {\n    let id = 0;\n    let cards: any[] = [];\n\n    if (CARD_THEMES.WINTER === settings.cardsTheme) {\n        cards = ['sin', 'vet', 'yellow', 'sun', 'shar', 'bike']\n    } else if (CARD_THEMES.ARCHITECTURE === settings.cardsTheme) {\n        cards = ['white','blue','york','orange','sad','stairs']\n    } else {\n        cards = ['siam','whcat','rusg','tree','kun','eyes'];\n    }\n    cards = cards.reduce((acc: any, type: string) => {\n        return [...acc, {id: id++, type}, {id: id++, type}];\n    }, []);\n\n    return shuffle(cards);\n};\n\n export default GamePage;\n","D:\\projects\\epam\\memory-game\\src\\components\\Card.tsx",[],"D:\\projects\\epam\\memory-game\\src\\utils\\gameUtils.ts",[],"D:\\projects\\epam\\memory-game\\src\\services\\storage.ts",[],"D:\\projects\\epam\\memory-game\\src\\utils\\getImage.ts",["235"],"import { winter1, winter2, winter3, winter4, winter5, winter6} from \"../assets/images/winter\";\r\nimport { architecture1, architecture3, architecture4, architecture5, architecture6, architecture8 } from \"../assets/images/architecture\";\r\nimport { cat1, cat3, cat4, cat5, cat6, cat8 } from \"../assets/images/cats\";\r\n\r\nconst getImage = (type: string) => {\r\n    let image = \"\";\r\n\r\n    const store = {\r\n        \"sin\": winter1,\r\n        \"vet\": winter2,\r\n        \"yellow\": winter3,\r\n        \"sun\": winter4,\r\n        \"shar\": winter5,\r\n        \"bike\": winter6,\r\n        \"white\": architecture1,\r\n        \"blue\": architecture3,\r\n        \"york\": architecture4,\r\n        \"orange\": architecture5,\r\n        \"sad\": architecture6,\r\n        \"stairs\": architecture8,\r\n        \"siam\": cat1,\r\n        \"whcat\": cat3,\r\n        \"rusg\": cat4,\r\n        \"tree\": cat5,\r\n        \"kun\": cat6,\r\n        \"eyes\": cat8,\r\n    };\r\n\r\n    return (store as any)[type];\r\n};\r\n\r\nexport default getImage;\r\n","D:\\projects\\epam\\memory-game\\src\\components\\Board.tsx",["236"],"D:\\projects\\epam\\memory-game\\src\\components\\FinalModal.tsx",["237","238","239","240","241"],"import React from \"react\";\nimport { GiBackstab, GiSandsOfTime, GiCardJoker, GiTrophy } from \"react-icons/gi\";\nimport LinkButton from \"../components/LinkButton\";\n\nconst BootstrapModal = () => {\n    return (\n        <div>\n            {/*<div className=\"rodal__title\">*/}\n            {/*    Game Over*/}\n            {/*</div>*/}\n            {/*<div className=\"rodal__content\">*/}\n            {/*    <div>{(props.victory) ? (<> <GiTrophy /> YOU WIN!! </>) : (<> <GiBackstab /> YOU LOSE!! </>)} </div>*/}\n            {/*    <div><GiSandsOfTime /> Time Taken: {100 - props.time} sec</div>*/}\n            {/*    <div><GiCardJoker /> Cards Flipped: {props.flips}</div>*/}\n            {/*</div>*/}\n            {/*<div className=\"rodal__btn-container\">*/}\n            {/*    <LinkButton marginTop=\"1rem\" onClick={() => history.push('/theme')} >Back</LinkButton>*/}\n            {/*    <LinkButton onClick={() => props.onPlayAgain()} >Play again</LinkButton>*/}\n            {/*</div>*/}\n        </div>\n    );\n};\n\nexport default BootstrapModal;\n",{"ruleId":"242","severity":1,"message":"243","line":1,"column":16,"nodeType":"244","messageId":"245","endLine":1,"endColumn":18},{"ruleId":"242","severity":1,"message":"246","line":1,"column":20,"nodeType":"244","messageId":"245","endLine":1,"endColumn":31},{"ruleId":"242","severity":1,"message":"247","line":3,"column":9,"nodeType":"244","messageId":"245","endLine":3,"endColumn":16},{"ruleId":"242","severity":1,"message":"248","line":5,"column":9,"nodeType":"244","messageId":"245","endLine":5,"endColumn":15},{"ruleId":"242","severity":1,"message":"249","line":6,"column":9,"nodeType":"244","messageId":"245","endLine":6,"endColumn":17},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"242","severity":1,"message":"254","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"250","replacedBy":"255"},{"ruleId":"252","replacedBy":"256"},{"ruleId":"242","severity":1,"message":"246","line":1,"column":20,"nodeType":"244","messageId":"245","endLine":1,"endColumn":31},{"ruleId":"242","severity":1,"message":"247","line":3,"column":9,"nodeType":"244","messageId":"245","endLine":3,"endColumn":16},{"ruleId":"242","severity":1,"message":"248","line":5,"column":9,"nodeType":"244","messageId":"245","endLine":5,"endColumn":15},{"ruleId":"242","severity":1,"message":"249","line":6,"column":9,"nodeType":"244","messageId":"245","endLine":6,"endColumn":17},{"ruleId":"250","replacedBy":"255"},{"ruleId":"252","replacedBy":"256"},{"ruleId":"242","severity":1,"message":"254","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"250","replacedBy":"257"},{"ruleId":"252","replacedBy":"258"},{"ruleId":"242","severity":1,"message":"259","line":4,"column":8,"nodeType":"244","messageId":"245","endLine":4,"endColumn":16},{"ruleId":"242","severity":1,"message":"260","line":1,"column":37,"nodeType":"244","messageId":"245","endLine":1,"endColumn":47},{"ruleId":"242","severity":1,"message":"261","line":2,"column":17,"nodeType":"244","messageId":"245","endLine":2,"endColumn":27},{"ruleId":"242","severity":1,"message":"262","line":19,"column":12,"nodeType":"244","messageId":"245","endLine":19,"endColumn":21},{"ruleId":"242","severity":1,"message":"263","line":20,"column":12,"nodeType":"244","messageId":"245","endLine":20,"endColumn":19},{"ruleId":"242","severity":1,"message":"264","line":112,"column":11,"nodeType":"244","messageId":"245","endLine":112,"endColumn":20},{"ruleId":"242","severity":1,"message":"265","line":6,"column":9,"nodeType":"244","messageId":"245","endLine":6,"endColumn":14},{"ruleId":"242","severity":1,"message":"266","line":3,"column":42,"nodeType":"244","messageId":"245","endLine":3,"endColumn":56},{"ruleId":"242","severity":1,"message":"267","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":20},{"ruleId":"242","severity":1,"message":"268","line":2,"column":22,"nodeType":"244","messageId":"245","endLine":2,"endColumn":35},{"ruleId":"242","severity":1,"message":"269","line":2,"column":37,"nodeType":"244","messageId":"245","endLine":2,"endColumn":48},{"ruleId":"242","severity":1,"message":"270","line":2,"column":50,"nodeType":"244","messageId":"245","endLine":2,"endColumn":58},{"ruleId":"242","severity":1,"message":"271","line":3,"column":8,"nodeType":"244","messageId":"245","endLine":3,"endColumn":18},"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'connect' is defined but never used.","'IState' is defined but never used.","'Dispatch' is defined but never used.","no-native-reassign",["272"],"no-negated-in-lhs",["273"],"'FLIP_CARD' is defined but never used.",["272"],["273"],["272"],["273"],"'fonSound' is defined but never used.","'useContext' is defined but never used.","'FinalModal' is defined but never used.","'modalShow' is assigned a value but never used.","'victory' is assigned a value but never used.","'playAgain' is assigned a value but never used.","'image' is assigned a value but never used.","'createMuiTheme' is defined but never used.","'GiBackstab' is defined but never used.","'GiSandsOfTime' is defined but never used.","'GiCardJoker' is defined but never used.","'GiTrophy' is defined but never used.","'LinkButton' is defined but never used.","no-global-assign","no-unsafe-negation"]